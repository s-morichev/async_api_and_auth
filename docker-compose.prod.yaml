services:
  nginx:
    restart: "always"
    image: "nginx_all_services"
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - backend

  backend:
    restart: "always"
    image: "backend"
    container_name: backend
    env_file:
      - .env
    depends_on:
      - elasticsearch_movies
      - redis_backend

  redis_backend:
    restart: "always"
    image: redis:7.0.5-alpine
    container_name: redis_backend
    command: redis-server --requirepass ${REDIS_BACKEND_PASSWORD} --maxmemory ${REDIS_BACKEND_MAXMEMORY} --maxmemory-policy allkeys-lru


  etl_movies:
    restart: "always"
    image: "etl_movies"
    container_name: etl_movies
    volumes:
      - etl_movies_data:/opt/app/var/
    env_file:
      - .env
    depends_on:
      - postgres_movies
      - elasticsearch_movies

  postgres_movies:
    restart: "always"
    image: postgres:15.1-alpine
    container_name: postgres_movies
    volumes:
      - postgres_movies_data:/var/lib/postgresql/data/
      - ./docker/postgres/dump_with_marks.gz:/docker-entrypoint-initdb.d/dump.sql.gz
    environment:
      - POSTGRES_USER=${PG_MOVIES_USER}
      - POSTGRES_PASSWORD=${PG_MOVIES_PASSWORD}
      - POSTGRES_DB=${PG_MOVIES_DB_NAME}

  elasticsearch_movies:
    restart: "always"
    image: elasticsearch:8.5.1
    container_name: elasticsearch_movies
    volumes:
      - elasticsearch_movies_data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  auth:
    restart: "always"
    image: "auth"
    container_name: auth
    env_file:
      - .env
    depends_on:
      - postgres_auth
      - redis_auth

  redis_auth:
    image: redis:7.0.5-alpine
    container_name: redis_auth
    command: redis-server --requirepass ${REDIS_AUTH_PASSWORD} --save 20 1
    volumes:
      - redis_auth_data:/data

  postgres_auth:
    image: postgres:15.1-alpine
    container_name: postgres_auth
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${PG_AUTH_USER}
      - POSTGRES_PASSWORD=${PG_AUTH_PASSWORD}
      - POSTGRES_DB=${PG_AUTH_DB_NAME}

  jaeger_collector:
    image: jaegertracing/jaeger-collector:1.28
    container_name: jaeger_collector
    restart: "always"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch_jaeger:9200
    depends_on:
      - elasticsearch_jaeger

  jaeger_query:
    image: jaegertracing/jaeger-query:1.41
    container_name: jaeger_query
    restart: "always"
    ports:
      - "${JAEGER_UI_PORT}:16686"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch_jaeger:9200
    depends_on:
      - elasticsearch_jaeger

  jaeger_agent:
    image: jaegertracing/jaeger-agent:1.41
    container_name: jaeger_agent
    restart: "always"
    command: ["--reporter.grpc.host-port=jaeger_collector:14250"]
    depends_on:
      - jaeger_collector

  elasticsearch_jaeger:
    restart: "always"
    image: elasticsearch:7.17.8
    container_name: elasticsearch_jaeger
    volumes:
      - elasticsearch_jaeger_data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

volumes:
  postgres_movies_data:
  elasticsearch_movies_data:
  etl_movies_data:
  postgres_auth_data:
  redis_auth_data:
  elasticsearch_jaeger_data:
